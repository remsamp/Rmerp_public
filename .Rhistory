for(j in 1:length(res_ab[[i]])){
idx <- c(idx, rep(unlist(res_temp[[i]]), each = res_ab[[i]][j]))
print(j)
}
w_mean[[i]] <- idx
}
rm(list = ls())
list.library <- c("RSQLite", "DBI" , "tidyr", "dplyr", "ggplot2", "ggmap", "ncdf4", "lubridate")
sapply (c(1:length(list.library)) ,function (i) library(list.library[i],character.only=T))
#load plankton for a given region, using celtic seas in that case
plankton_coord <- read.csv("~/Google Drive/not_to_share/my_backup/myDocuments/postdoc/MERP_postdoc/plankton_data/MERP CPR data/MERP_Extract_Celtic_Coord.csv", header = F)
plankton_eyec <- read.csv("~/Google Drive/not_to_share/my_backup/myDocuments/postdoc/MERP_postdoc/plankton_data/MERP CPR data/MERP_Extract_Celtic_EyeC.csv", header = F)
plankton_trav <- read.csv("~/Google Drive/not_to_share/my_backup/myDocuments/postdoc/MERP_postdoc/plankton_data/MERP CPR data/MERP_Extract_Celtic_Trav.csv", header = F)
plankton_phyto <- read.csv("~/Google Drive/not_to_share/my_backup/myDocuments/postdoc/MERP_postdoc/plankton_data/MERP CPR data/MERP_Extract_Celtic_Phyto.csv", header = F)
list_spe_eyec<- read.csv("~/Google Drive/not_to_share/my_backup/myDocuments/postdoc/MERP_postdoc/plankton_data/MERP CPR data/MERP_Extract_List_EyeC.csv", header = F)
list_spe_trav <- read.csv("~/Google Drive/not_to_share/my_backup/myDocuments/postdoc/MERP_postdoc/plankton_data/MERP CPR data/MERP_Extract_List_Trav.csv", header = F)
plankton_coord1 <- read.csv("~/Google Drive/not_to_share/my_backup/myDocuments/postdoc/MERP_postdoc/plankton_data/MERP CPR data/plankton_coord1.csv")
plankton_coord1$close_temp[plankton_coord1$close_temp > 100] <- NA
plankton_occ2 <- plankton_eyec[plankton_coord[, 3] >= 1991 & plankton_coord[, 3] < 2014, ]
tokeep <- sapply(c(1:ncol(plankton_occ2)), function(i) sum(plankton_occ2[, i] > 0))
idx <- tokeep >= 10
plankton_occ2 <- plankton_occ2[, idx]
res_temp <- sapply(c(1:ncol(plankton_occ2)), function(i) plankton_coord1$close_temp[plankton_occ2[, i] != 0])
res_ab <- sapply(c(1:ncol(plankton_occ2)), function(i) plankton_occ2[plankton_occ2[, i] != 0, i])
# need to reorder this, and also exclude potentially the species with too few observations
w_mean <- numeric(0)
for(i in 1:length(res_ab)) w_mean <- c(w_mean, sum(res_ab[[i]] * res_temp[[i]], na.rm = T) / sum(res_ab[[i]], na.rm = T))
mine <- data.frame(names(plankton_occ2), w_mean)
mine <- mine[order(mine[, 2]),]
plot(c(1:nrow(mine)), mine[, 2], ylim = c(8,18), pch = 16)
w_mean <- vector("list", length = length(res_ab))
res_ab[[1]]
res_temp[[1]]
tokeep
w_mean <- vector("list", length = length(res_ab))
for(i in 1:length(res_ab)){
idx <- numeric(0)
res_ab1 <- unlist(res_ab[[i]])
res_temp1 <- unlist(res_temp[[i]])
for(j in 1:length(res_ab1)){
idx <- c(idx, rep(res_temp1[j], res_ab1[j]))
print(j)
}
w_mean[[i]] <- idx
}
w_mean[[1]]
length(w_mean[[1]])
sum(res_ab[[1]])
(res_ab[[1]])[1:10]
(w_mean[[1]])[1:10]
(res_temp[[1]])[1:10]
meanr <- function(x) mean(x, na.rm = T)
minr <- function(x) min(x, na.rm = T)
maxr <- function(x) max(x, na.rm = T)
medianr <- function(x) median(x, na.rm = T)
quantile1 <- function(x) quantile(x, 0.1, na.rm = T)
quantile2 <- function(x) quantile(x, 0.25, na.rm = T)
quantile3 <- function(x) quantile(x, 0.75, na.rm = T)
quantile4 <- function(x) quantile(x, 0.9, na.rm = T)
mine <- data.frame(names(plankton_occ2), lapply(w_mean, meanr))
mine <- mine[order(mine[, 2]),]
mine[1:10,]
head(mine)
dim(mine)
lapply(w_mean, meanr)
mine <- data.frame(names(plankton_occ2), unlist(lapply(w_mean, meanr)))
head(mine)
mine <- data.frame(names(plankton_occ2), unlist(lapply(w_mean, meanr)))
mine <- mine[order(mine[, 2]),]
head(mine)
plot(c(1:nrow(mine)), mine[, 2], ylim = c(8,18), pch = 16)
plot(c(1:nrow(mine)), mine[, 2], ylim = c(8,18), pch = 16)
mine <- data.frame(names(plankton_occ2), unlist(lapply(w_mean, medianr)), unlist(lapply(w_mean, quantile1)), unlist(lapply(w_mean, quantile2)), unlist(lapply(w_mean, quantile3)), unlist(lapply(w_mean, quantile4)))
mine <- mine[order(mine[, 2]),]
plot(c(1:nrow(mine)), mine[, 2], ylim = c(8,18), pch = 16)
lines(c(1:nrow(mine)), mine[, 3], col = "grey")
lines(c(1:nrow(mine)), mine[, 6], col = "grey")
lines(c(1:nrow(mine)), mine[, 4], col = "grey")
lines(c(1:nrow(mine)), mine[, 5], col = "grey")
par(mar = c(3, 3, 2, 2), mgp = c(2, 1, 0), las = 1)
plot(c(1:nrow(mine)), mine[, 2], ylim = c(8,18), pch = 16, bty = "n")
lines(c(1:nrow(mine)), mine[, 3], col = "grey")
lines(c(1:nrow(mine)), mine[, 4], col = "grey")
lines(c(1:nrow(mine)), mine[, 5], col = "grey")
lines(c(1:nrow(mine)), mine[, 6], col = "grey")
par(mar = c(3, 3, 2, 2), mgp = c(2, 1, 0), las = 1)
plot(c(1:nrow(mine)), mine[, 2], ylim = c(8,18), pch = 16, bty = "n", xlab = "Species rank", ylab = "Temperature")
lines(c(1:nrow(mine)), mine[, 3], col = "grey")
lines(c(1:nrow(mine)), mine[, 4], col = "grey")
lines(c(1:nrow(mine)), mine[, 5], col = "grey")
lines(c(1:nrow(mine)), mine[, 6], col = "grey")
par(mar = c(3, 3, 2, 2), mgp = c(2, 1, 0), las = 1)
plot(c(1:nrow(mine)), mine[, 2], ylim = c(8,18), ty = "l", bty = "n", xlab = "Species rank", ylab = "Temperature", lwd = 2)
lines(c(1:nrow(mine)), mine[, 3], col = "grey", lwd = 2)
lines(c(1:nrow(mine)), mine[, 4], col = "grey", lwd = 2)
lines(c(1:nrow(mine)), mine[, 5], col = "grey", lwd = 2)
lines(c(1:nrow(mine)), mine[, 6], col = "grey", lwd = 2)
mine[1:10,1]
as.character(mine[1:10,1])
head(list_spe_eyec)
list_spe_eyec[,1]
class(list_spe_eyec[,1])
as.character(mine[1:10,1])
mynames <- gsub(as.character(mine[1:10,1]), pattern = "V", replacement = "", fixed = T)
mynames
listnames <- as.character(list_spe_eyec[,1])
match(mynames, listnames)
listnames
mynames
plankton_eyec[1:10, 1:10]
mynames
mynames <- as.numeric(mynames)
listnames <- as.character(list_spe_eyec[,1])
listnames[mynames]
mynames <- gsub(as.character(mine[1:10,1]), pattern = "V", replacement = "", fixed = T)
mynames <- as.numeric(mynames)
listnames <- (list_spe_eyec[,2])
listnames[mynames]
mynames <- gsub(as.character(mine[,1]), pattern = "V", replacement = "", fixed = T)
mynames <- as.numeric(mynames)
listnames <- (list_spe_eyec[,2])
listnames[mynames]
(list_spe_eyec[,2])
mynames <- gsub(as.character(mine[,1]), pattern = "V", replacement = "", fixed = T)
mynames <- as.numeric(mynames)
listnames <- as.character(list_spe_eyec[,2])
listnames[mynames]
mynames <- gsub(as.character(mine[,1]), pattern = "V", replacement = "", fixed = T)
mynames <- as.numeric(mynames)
listnames <- as.character(list_spe_eyec[,2])
listnames[mynames]
head(list_spe_eyec)
head(plankton_coord)
sapply(c(1:ncol(plankton_occ1)), function(i) plankton_coord1[plankton_occ1[, i] > 0, 3])
plankton_occ1 <- plankton_occ[plankton_coord[, 3] >= 1991 & plankton_coord[, 3] < 2014, ]
plankton_occ <- cbind(plankton_eyec, plankton_trav)
plankton_occ[plankton_occ > 0] <- 1
names(plankton_occ) <- c(paste("V", c(1:271), "_zoo_eyec", sep = ""), paste("V", c(1:113), "_zoo_trav", sep = ""))
plankton_occ1 <- plankton_occ[plankton_coord[, 3] >= 1991 & plankton_coord[, 3] < 2014, ]
sapply(c(1:ncol(plankton_occ1)), function(i) plankton_coord1[plankton_occ1[, i] > 0, 3])
tokeep1 <- sapply(c(1:ncol(plankton_occ1)), function(i) table(plankton_coord1[plankton_occ1[, i] > 0, 3]))
tokeep1[[1]]
length(tokeep1[[1]])
length(tokeep1[[10]])
(tokeep1[[10]])
tokeep1 <- sapply(c(1:ncol(plankton_occ1)), function(i) length(table(plankton_coord1[plankton_occ1[, i] > 0, 3])))
tokeep1
23*2/3
tokeep <- sapply(c(1:ncol(plankton_occ1)), function(i) sum(plankton_occ1[, i] > 0))
idx <- tokeep >= 100
sum(idx)
tokeep1 <- sapply(c(1:ncol(plankton_occ1)), function(i) length(table(plankton_coord1[plankton_occ1[, i] > 0, 3])))
idx1 <- tokeep1 >= 16
sum(idx1)
tokeep2 <- sapply(c(1:ncol(plankton_occ1)), function(i) {
bla <- table(plankton_coord1[plankton_occ1[, i] > 0, 3]))
bla <- as.numeric(bla)
bla <- bla[bla > 0]
min(bla)
})
tokeep2 <- sapply(c(1:ncol(plankton_occ1)), function(i) {
bla <- table(plankton_coord1[plankton_occ1[, i] > 0, 3])
bla <- as.numeric(bla)
bla <- bla[bla > 0]
min(bla)
})
tokeep2
tokeep2 <- sapply(c(1:ncol(plankton_occ1)), function(i) {
bla <- table(plankton_coord1[plankton_occ1[, i] > 0, 3])
bla <- as.numeric(bla)
# bla <- bla[bla > 0]
min(bla)
})
tokeep2
tokeep2 <- sapply(c(1:ncol(plankton_occ1)), function(i) {
bla <- table(plankton_coord1[plankton_occ1[, i] > 0, 3])
# bla <- as.numeric(bla)
# bla <- bla[bla > 0]
# min(bla)
})
tokeep2 <- sapply(c(1:ncol(plankton_occ1)), function(i) {
bla <- table(plankton_coord1[plankton_occ1[, i] > 0, 3])
bla <- as.numeric(bla)
# bla <- bla[bla > 0]
# min(bla)
})
tokeep2 <- sapply(c(1:ncol(plankton_occ1)), function(i) {
bla <- table(plankton_coord1[plankton_occ1[, i] > 0, 3])
bla <- as.numeric(bla)
# bla <- bla[bla > 0]
min(bla)
})
tokeep2 <- sapply(c(1:ncol(plankton_occ1)), function(i) {
bla <- table(plankton_coord1[plankton_occ1[, i] > 0, 3])
bla <- as.numeric(bla)
# bla <- bla[bla > 0]
# min(bla)
})
tokeep2
as.numeric(bla[[384]])
as.numeric(tokeep2[[384]])
tokeep2 <- sapply(c(1:ncol(plankton_occ1)), function(i) {
bla <- table(plankton_coord1[plankton_occ1[, i] > 0, 3])
bla <- as.numeric(bla)
# bla <- bla[bla > 0]
min(bla)
})
tokeep2
tokeep2 <- sapply(c(1:ncol(plankton_occ1)), function(i) {
bla <- table(plankton_coord1[plankton_occ1[, i] > 0, 3])
bla <- as.numeric(bla)
# bla <- bla[bla > 0]
min(bla)
})
tokeep2[!is.finite(tokeep2)] <- 0
tokeep2
idx1 <- tokeep1 >= 16 & tokeep2 >= 10
sum(idx1)
idx1 <- tokeep1 >= 16 & tokeep2 >= 5
sum(idx1)
idx1 <- tokeep1 >= 16 & tokeep2 >= 10
plankton_occ2 <- plankton_occ1[, idx]
res <- sapply(c(1:ncol(plankton_occ2)), function(i) plankton_coord1$close_temp[plankton_occ2[, i] != 0])
# need to reorder this, and also exclude potentially the species with too few observations
meanr <- function(x) mean(x, na.rm = T)
minr <- function(x) min(x, na.rm = T)
maxr <- function(x) max(x, na.rm = T)
medianr <- function(x) median(x, na.rm = T)
quantile1 <- function(x) quantile(x, 0.1, na.rm = T)
quantile2 <- function(x) quantile(x, 0.25, na.rm = T)
quantile3 <- function(x) quantile(x, 0.75, na.rm = T)
quantile4 <- function(x) quantile(x, 0.9, na.rm = T)
mine <- data.frame(c(1:length(res)),unlist(lapply(res, meanr)), unlist(lapply(res, minr)), unlist(lapply(res, maxr)), unlist(lapply(res, medianr)),
unlist(lapply(res, quantile1)), unlist(lapply(res, quantile2)), unlist(lapply(res, quantile3)), unlist(lapply(res, quantile4)))
mine <- mine[order(mine[,5]),]
# idx <- mine[, 1]
# plot(rep(1, length(res[[idx[1]]])), unlist(res[[idx[1]]]), xlim = c(1,80), ylim = c(5,20))
# for(i in 2:length(res)) points(rep(i, length(res[[idx[i]]])), unlist(res[[idx[i]]]))
par(mar = c(3, 3, 2, 2), mgp = c(2, 1, 0), las = 1)
plot(c(1:nrow(mine)), mine[, 5], ylim = c(8,18), pch = 16)
# points(c(1:nrow(mine)), mine[, 5], pch = 16)
# points(c(1:nrow(mine)), mine[, 3])
# points(c(1:nrow(mine)), mine[, 4])
points(c(1:nrow(mine)), mine[, 6], pch = 16, col = "dark grey")
points(c(1:nrow(mine)), mine[, 7], pch = 16, col = "grey")
points(c(1:nrow(mine)), mine[, 8], pch = 16, col = "light grey")
points(c(1:nrow(mine)), mine[, 9], pch = 1)
par(mar = c(3, 3, 2, 2), mgp = c(2, 1, 0), las = 1)
plot(c(1:nrow(mine)), mine[, 5], ylim = c(8,18), ty ="l", xlab = "Species rank", ylab = "Temperature")
lines(c(1:nrow(mine)), mine[, 6], pch = 16, col = "dark grey")
lines(c(1:nrow(mine)), mine[, 7], pch = 16, col = "grey")
lines(c(1:nrow(mine)), mine[, 8], pch = 16, col = "light grey")
lines(c(1:nrow(mine)), mine[, 9], pch = 1)
par(mar = c(3, 3, 2, 2), mgp = c(2, 1, 0), las = 1)
plot(c(1:nrow(mine)), mine[, 5], ylim = c(8,18), ty ="l", xlab = "Species rank", ylab = "Temperature", lwd = 2)
lines(c(1:nrow(mine)), mine[, 6], pch = 16, col = "grey", lwd = 2)
lines(c(1:nrow(mine)), mine[, 7], pch = 16, col = "grey", lwd = 2)
lines(c(1:nrow(mine)), mine[, 8], pch = 16, col = "grey", lwd = 2)
lines(c(1:nrow(mine)), mine[, 9], pch = 1, col ="grey", lwd = 2)
par(mar = c(3, 3, 2, 2), mgp = c(2, 1, 0), las = 1)
plot(c(1:nrow(mine)), mine[, 5], ylim = c(8,18), ty ="l", xlab = "Species rank", ylab = "Temperature", lwd = 2, bty ="n")
lines(c(1:nrow(mine)), mine[, 6], pch = 16, col = "grey", lwd = 2)
lines(c(1:nrow(mine)), mine[, 7], pch = 16, col = "grey", lwd = 2)
lines(c(1:nrow(mine)), mine[, 8], pch = 16, col = "grey", lwd = 2)
lines(c(1:nrow(mine)), mine[, 9], pch = 1, col ="grey", lwd = 2)
mine[,1]
plankton_occ2 <- plankton_occ1[, idx1]
res <- sapply(c(1:ncol(plankton_occ2)), function(i) plankton_coord1$close_temp[plankton_occ2[, i] != 0])
# need to reorder this, and also exclude potentially the species with too few observations
meanr <- function(x) mean(x, na.rm = T)
minr <- function(x) min(x, na.rm = T)
maxr <- function(x) max(x, na.rm = T)
medianr <- function(x) median(x, na.rm = T)
quantile1 <- function(x) quantile(x, 0.1, na.rm = T)
quantile2 <- function(x) quantile(x, 0.25, na.rm = T)
quantile3 <- function(x) quantile(x, 0.75, na.rm = T)
quantile4 <- function(x) quantile(x, 0.9, na.rm = T)
mine <- data.frame(c(1:length(res)),unlist(lapply(res, meanr)), unlist(lapply(res, minr)), unlist(lapply(res, maxr)), unlist(lapply(res, medianr)),
unlist(lapply(res, quantile1)), unlist(lapply(res, quantile2)), unlist(lapply(res, quantile3)), unlist(lapply(res, quantile4)))
mine <- mine[order(mine[,5]),]
# idx <- mine[, 1]
# plot(rep(1, length(res[[idx[1]]])), unlist(res[[idx[1]]]), xlim = c(1,80), ylim = c(5,20))
# for(i in 2:length(res)) points(rep(i, length(res[[idx[i]]])), unlist(res[[idx[i]]]))
par(mar = c(3, 3, 2, 2), mgp = c(2, 1, 0), las = 1)
plot(c(1:nrow(mine)), mine[, 5], ylim = c(8,18), pch = 16)
# points(c(1:nrow(mine)), mine[, 5], pch = 16)
# points(c(1:nrow(mine)), mine[, 3])
# points(c(1:nrow(mine)), mine[, 4])
points(c(1:nrow(mine)), mine[, 6], pch = 16, col = "dark grey")
points(c(1:nrow(mine)), mine[, 7], pch = 16, col = "grey")
points(c(1:nrow(mine)), mine[, 8], pch = 16, col = "light grey")
points(c(1:nrow(mine)), mine[, 9], pch = 1)
par(mar = c(3, 3, 2, 2), mgp = c(2, 1, 0), las = 1)
plot(c(1:nrow(mine)), mine[, 5], ylim = c(8,18), ty ="l", xlab = "Species rank", ylab = "Temperature", lwd = 2, bty ="n")
lines(c(1:nrow(mine)), mine[, 6], pch = 16, col = "grey", lwd = 2)
lines(c(1:nrow(mine)), mine[, 7], pch = 16, col = "grey", lwd = 2)
lines(c(1:nrow(mine)), mine[, 8], pch = 16, col = "grey", lwd = 2)
lines(c(1:nrow(mine)), mine[, 9], pch = 1, col ="grey", lwd = 2)
res
names(res)
names(plankton_occ2)
tokeep1 <- sapply(c(1:ncol(plankton_occ2)), function(i) length(table(plankton_coord1[plankton_occ2[, i] > 0, 3])))
tokeep2 <- sapply(c(1:ncol(plankton_occ2)), function(i) {
bla <- table(plankton_coord1[plankton_occ2[, i] > 0, 3])
bla <- as.numeric(bla)
# bla <- bla[bla > 0]
min(bla)
})
tokeep2[!is.finite(tokeep2)] <- 0
idx1 <- tokeep1 >= 16 & tokeep2 >= 10
sum(idx1)
plankton_occ2 <- plankton_eyec[plankton_coord[, 3] >= 1991 & plankton_coord[, 3] < 2014, ]
tokeep1 <- sapply(c(1:ncol(plankton_occ2)), function(i) length(table(plankton_coord1[plankton_occ2[, i] > 0, 3])))
tokeep2 <- sapply(c(1:ncol(plankton_occ2)), function(i) {
bla <- table(plankton_coord1[plankton_occ2[, i] > 0, 3])
bla <- as.numeric(bla)
# bla <- bla[bla > 0]
min(bla)
})
tokeep2[!is.finite(tokeep2)] <- 0
# we could keep species that are observed in at least 2/3 of the 23 years (16 years and more)
idx1 <- tokeep1 >= 16 & tokeep2 >= 10
sum(idx1)
tokeep1 <- sapply(c(1:ncol(plankton_occ2)), function(i) length(table(plankton_coord1[plankton_occ2[, i] > 0, 3])))
tokeep2 <- sapply(c(1:ncol(plankton_occ2)), function(i) {
bla <- table(plankton_coord1[plankton_occ2[, i] > 0, 3])
bla <- as.numeric(bla)
# bla <- bla[bla > 0]
min(bla)
})
tokeep2[!is.finite(tokeep2)] <- 0
# we could keep species that are observed in at least 2/3 of the 23 years (16 years and more)
idx1 <- tokeep1 >= 16 & tokeep2 >= 10
plankton_occ2 <- plankton_occ2[, idx1]
res_temp <- sapply(c(1:ncol(plankton_occ2)), function(i) plankton_coord1$close_temp[plankton_occ2[, i] != 0])
res_ab <- sapply(c(1:ncol(plankton_occ2)), function(i) plankton_occ2[plankton_occ2[, i] != 0, i])
# need to reorder this, and also exclude potentially the species with too few observations
w_mean <- numeric(0)
for(i in 1:length(res_ab)) w_mean <- c(w_mean, sum(res_ab[[i]] * res_temp[[i]], na.rm = T) / sum(res_ab[[i]], na.rm = T))
mine <- data.frame(names(plankton_occ2), w_mean)
mine <- mine[order(mine[, 2]),]
w_mean <- vector("list", length = length(res_ab))
for(i in 1:length(res_ab)){
idx <- numeric(0)
res_ab1 <- unlist(res_ab[[i]])
res_temp1 <- unlist(res_temp[[i]])
for(j in 1:length(res_ab1)){
idx <- c(idx, rep(res_temp1[j], res_ab1[j]))
print(j)
}
w_mean[[i]] <- idx
}
meanr <- function(x) mean(x, na.rm = T)
minr <- function(x) min(x, na.rm = T)
maxr <- function(x) max(x, na.rm = T)
medianr <- function(x) median(x, na.rm = T)
quantile1 <- function(x) quantile(x, 0.1, na.rm = T)
quantile2 <- function(x) quantile(x, 0.25, na.rm = T)
quantile3 <- function(x) quantile(x, 0.75, na.rm = T)
quantile4 <- function(x) quantile(x, 0.9, na.rm = T)
mine <- data.frame(names(plankton_occ2), unlist(lapply(w_mean, medianr)), unlist(lapply(w_mean, quantile1)), unlist(lapply(w_mean, quantile2)), unlist(lapply(w_mean, quantile3)), unlist(lapply(w_mean, quantile4)))
mine <- mine[order(mine[, 2]),]
par(mar = c(3, 3, 2, 2), mgp = c(2, 1, 0), las = 1)
plot(c(1:nrow(mine)), mine[, 2], ylim = c(8,18), ty = "l", bty = "n", xlab = "Species rank", ylab = "Temperature", lwd = 2)
lines(c(1:nrow(mine)), mine[, 3], col = "grey", lwd = 2)
lines(c(1:nrow(mine)), mine[, 4], col = "grey", lwd = 2)
lines(c(1:nrow(mine)), mine[, 5], col = "grey", lwd = 2)
lines(c(1:nrow(mine)), mine[, 6], col = "grey", lwd = 2)
mynames <- gsub(as.character(mine[,1]), pattern = "V", replacement = "", fixed = T)
mynames <- as.numeric(mynames)
listnames <- as.character(list_spe_eyec[,2])
listnames[mynames]
idx1 <- tokeep1 >= 16 & tokeep2 >= 5
sum(idx1)
idx1 <- tokeep1 >= 16 & tokeep2 >= 2
sum(idx1)
View(list_spe_eyec)
View(list_spe_eyec)
View(list_spe_trav)
View(list_spe_trav)
as.character(mine[,1])
tokeep <- sapply(c(1:ncol(plankton_occ1)), function(i) sum(plankton_occ1[, i] > 0))
idx <- tokeep >= 100
# this condition is not enough: 100 observations could have happened in the first few years with nothing at the end
# what we want is obs that are distributed relatively evenly through time
tokeep1 <- sapply(c(1:ncol(plankton_occ1)), function(i) length(table(plankton_coord1[plankton_occ1[, i] > 0, 3])))
tokeep2 <- sapply(c(1:ncol(plankton_occ1)), function(i) {
bla <- table(plankton_coord1[plankton_occ1[, i] > 0, 3])
bla <- as.numeric(bla)
# bla <- bla[bla > 0]
min(bla)
})
tokeep2[!is.finite(tokeep2)] <- 0
# we could keep species that are observed in at least 2/3 of the 23 years (16 years and more)
idx1 <- tokeep1 >= 16 & tokeep2 >= 10
plankton_occ2 <- plankton_occ1[, idx1]
# plankton_occ2 <- plankton_occ1[, idx]
res <- sapply(c(1:ncol(plankton_occ2)), function(i) plankton_coord1$close_temp[plankton_occ2[, i] != 0])
# need to reorder this, and also exclude potentially the species with too few observations
meanr <- function(x) mean(x, na.rm = T)
minr <- function(x) min(x, na.rm = T)
maxr <- function(x) max(x, na.rm = T)
medianr <- function(x) median(x, na.rm = T)
quantile1 <- function(x) quantile(x, 0.1, na.rm = T)
quantile2 <- function(x) quantile(x, 0.25, na.rm = T)
quantile3 <- function(x) quantile(x, 0.75, na.rm = T)
quantile4 <- function(x) quantile(x, 0.9, na.rm = T)
mine <- data.frame(names(plankton_occ2),unlist(lapply(res, meanr)), unlist(lapply(res, minr)), unlist(lapply(res, maxr)), unlist(lapply(res, medianr)),
unlist(lapply(res, quantile1)), unlist(lapply(res, quantile2)), unlist(lapply(res, quantile3)), unlist(lapply(res, quantile4)))
mine <- mine[order(mine[,5]),]
# idx <- mine[, 1]
# plot(rep(1, length(res[[idx[1]]])), unlist(res[[idx[1]]]), xlim = c(1,80), ylim = c(5,20))
# for(i in 2:length(res)) points(rep(i, length(res[[idx[i]]])), unlist(res[[idx[i]]]))
par(mar = c(3, 3, 2, 2), mgp = c(2, 1, 0), las = 1)
plot(c(1:nrow(mine)), mine[, 5], ylim = c(8,18), pch = 16)
# points(c(1:nrow(mine)), mine[, 5], pch = 16)
# points(c(1:nrow(mine)), mine[, 3])
# points(c(1:nrow(mine)), mine[, 4])
points(c(1:nrow(mine)), mine[, 6], pch = 16, col = "dark grey")
points(c(1:nrow(mine)), mine[, 7], pch = 16, col = "grey")
points(c(1:nrow(mine)), mine[, 8], pch = 16, col = "light grey")
points(c(1:nrow(mine)), mine[, 9], pch = 1)
par(mar = c(3, 3, 2, 2), mgp = c(2, 1, 0), las = 1)
plot(c(1:nrow(mine)), mine[, 5], ylim = c(8,18), ty ="l", xlab = "Species rank", ylab = "Temperature", lwd = 2, bty ="n")
lines(c(1:nrow(mine)), mine[, 6], pch = 16, col = "grey", lwd = 2)
lines(c(1:nrow(mine)), mine[, 7], pch = 16, col = "grey", lwd = 2)
lines(c(1:nrow(mine)), mine[, 8], pch = 16, col = "grey", lwd = 2)
lines(c(1:nrow(mine)), mine[, 9], pch = 1, col ="grey", lwd = 2)
as.character(mine[,1])
mynames <- gsub(as.character(mine[,1]), pattern = "V", replacement = "", fixed = T)
mynames <- gsub(mynames, pattern = "_zoo", replacement = "", fixed = T)
mynames
rm(list = ls())
list.packages <- c("devtools","roxygen2","testthat","knitr","rmarkdown")
sapply(c(1:length(list.packages)),function(i){
# install.packages(list.packages[i],repos="http://star-www.st-andrews.ac.uk/cran/")
library(list.packages[i],character.only=T)
})
has_devel()
setwd("/Users/Remi/Google Drive/not_to_share/my_backup/myDocuments/github")
devtools::create("R_merp",rstudio=F)
devtools::create("Rmerp",rstudio=F)
setwd("Rmerp")
?getURL
?xmlTreeParse
?xmlRoot
?xmlSapply
?xmlSApply
devtools::use_package("RCurl")# in documentation: package under "Imports". package must be installed before you can take a dependency on it
devtools::use_package("XML")# in documentation: package under "Suggests". see what to add in functions if needs that particular package
library(roxygen2)
setwd("/Users/Remi/Google Drive/not_to_share/my_backup/myDocuments/github/Rmerp")
devtools::document()# this works as long as we are in the right folder for the R package, no need to "point" at the R file. the first sentence is the title of the help file, so keep that in mind
?get_datras_data# it works!! note that you can add links to other existing functions using the see also command, or some code that is not run. refer to the hadley advance R site for more details, for now we have enough!
mydata <- yearquarter <- read.csv("~/Google Drive/not_to_share/my_backup/myDocuments/postdoc/MERP_postdoc/ices_documents/year_quarter_survey.csv")
mydata
getwd()
mydata <- yearquarter <- read.csv("~/Google Drive/not_to_share/my_backup/myDocuments/postdoc/MERP_postdoc/ices_documents/year_quarter_survey.csv")
datras_surveys <- mydata
devtools::use_data(datras_surveys, Rmerp)
devtools::use_data(datras_surveys, "Rmerp")
mydata <- read.csv("~/Google Drive/not_to_share/my_backup/myDocuments/postdoc/MERP_postdoc/ices_documents/year_quarter_survey.csv")
datras_surveys <- mydata
devtools::use_data(datras_surveys, "Rmerp")
datras_surveys
getwd()
setwd("/Users/Remi/Google Drive/not_to_share/my_backup/myDocuments/github")
devtools::use_data(datras_surveys, "Rmerp")
list.files()
devtools::use_data(datras_surveys, Rmerp)
setwd("/Users/Remi/Google Drive/not_to_share/my_backup/myDocuments/github/Rmerp")
devtools::use_data(datras_surveys, Rmerp)
datras_surveys[,2]
datras_surveys[1,2]
devtools::document()# this works as long as we are in the right folder for the R package, no need to "point" at the R file. the first sentence is the title of the help file, so keep that in mind
?get_datras_data# it works!! note that you can add links to other existing functions using the see also command, or some code that is not run. refer to the hadley advance R site for more details, for now we have enough!
devtools::document()# this works as long as we are in the right folder for the R package, no need to "point" at the R file. the first sentence is the title of the help file, so keep that in mind
?get_datras_data# it works!! note that you can add links to other existing functions using the see also command, or some code that is not run. refer to the hadley advance R site for more details, for now we have enough!
devtools::document()# this works as long as we are in the right folder for the R package, no need to "point" at the R file. the first sentence is the title of the help file, so keep that in mind
?get_datras_data# it works!! note that you can add links to other existing functions using the see also command, or some code that is not run. refer to the hadley advance R site for more details, for now we have enough!
devtools::document()# this works as long as we are in the right folder for the R package, no need to "point" at the R file. the first sentence is the title of the help file, so keep that in mind
?clean_datras_data
?get_datras_data# it works!! note that you can add links to other existing functions using the see also command, or some code that is not run. refer to the hadley advance R site for more details, for now we have enough!
?clean_datras_data
condition
get_datras_data <- function(whatinfo, survey, year, quarter){
whichAPI <- switch(whatinfo,HH = "getHHdata",HL = "getHLdata",CA = "getCAdata")
myDATRASurl <- paste("https://datras.ices.dk/WebServices/DATRASWebService.asmx/",whichAPI,"?survey=",survey,"&year=",year,"&quarter=",quarter,sep="")
myxml <- xmlTreeParse(getURL(myDATRASurl))
xmltop = xmlRoot(myxml)
data.frame(t(xmlSApply(xmltop, function(x) xmlSApply(x, xmlValue))),row.names=NULL)
}
datras_surveys[1,]
bla <- get_datras_data("EVHOE", "1997","4")
bla <- get_datras_data("HH","EVHOE", "1997","4")
library(XML)
bla <- get_datras_data("HH","EVHOE", "1997","4")
library(RCurl)
bla <- get_datras_data("HH","EVHOE", "1997","4")
head(bla)
bla$Year[1:10]
class(bla$Year[1:10])
datras_surveys[,2]
datras_surveys[,3]
sort(datras_surveys[,3])
devtools::document()# this works as long as we are in the right folder for the R package, no need to "point" at the R file. the first sentence is the title of the help file, so keep that in mind
?install_github
rm(list = ls())
library(devtools)
devtools::install_github(repo = "remsamp/Rmerp", auth_user = "remsamp", password = "sampras141")
devtools::install_github(repo = "remsamp/Rmerp", auth_token = "74ce5a1e74c4b703b4d6f71386922c779fe875c3")
?clean_datras_data
